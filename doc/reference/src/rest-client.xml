<?xml version="1.0" encoding="UTF-8"?>
<chapter id="resttemplate" xmlns="http://docbook.org/ns/docbook" version="5.0">
  <title>RestTemplate</title>

  <para>
    Invoking RESTful services in .NET is typically done using the
    <classname>HttpWebRequest</classname> class. 
    For common REST operations this approach is too low level as shown below.
  </para>

  <programlisting language="csharp"><classname>Uri</classname> address = new <classname>Uri</classname>("http://example.com/hotels/1/bookings");

<classname>HttpWebRequest</classname> request = <classname>WebRequest</classname>.Create(address) as <classname>HttpWebRequest</classname>;
request.Method = "POST";
string requestBody = // create booking request content

byte[] byteData = <classname>UTF8Encoding</classname>.UTF8.GetBytes(requestBody);
request.ContentLength = byteData.Length;
using (<classname>Stream</classname> requestStream = request.GetRequestStream())
{
  requestStream.Write(byteData, 0, byteData.Length);
}

using (<classname>HttpWebResponse</classname> response = request.GetResponse() as <classname>HttpWebResponse</classname>)
{
  if (response.StatusCode == <classname>HttpStatusCode</classname>.Created)
  {
    string location = response.Headers["Location"];
    if (location != null)
    {
      <classname>Console</classname>.WriteLine("Created new booking at: " + location);
    }
  }
}</programlisting>

  <note>
    <para>
      There is another class called <classname>WebClient</classname> but does not support 
      HTTP headers and HTTP status code/description.
    </para>
  </note>

  <para>
    RestTemplate provides higher level methods that correspond to each
    of the six main HTTP methods that make invoking many RESTful services a
    one-liner and enforce REST best practices.
  </para>

  <section id="resttemplate-operations">
    <title>REST operations</title>

    <table frame="all">
      <title>Overview of RestTemplate methods</title>
      <tgroup cols="2">
        <colspec colwidth="30*"/>
        <colspec colwidth="70*"/>
        <tbody>
          <row>
            <entry>
              <emphasis role="bold">HTTP Method</emphasis>
            </entry>
            <entry>
              <emphasis role="bold">RestTemplate Method</emphasis>
            </entry>
          </row>
          <row>
            <entry>DELETE</entry>
            <entry>
              <ulink url="http://todo">Delete(Uri url)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry>GET</entry>
            <entry>
              <ulink url="http://todo">GetForObject&lt;T&gt;(Uri url)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry></entry>
            <entry>
              <ulink url="http://todo">GetForMessage&lt;T&gt;(Uri url)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry>HEAD</entry>
            <entry>
              <ulink url="http://todo">HeadForHeaders(Uri url)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry>OPTIONS</entry>
            <entry>
              <ulink url="http://todo">OptionsForAllow(Uri url)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry>POST</entry>
            <entry>
              <ulink url="http://todo">PostForLocation&lt;T&gt;(Uri url, object request)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry></entry>
            <entry>
              <ulink url="http://todo">PostForObject&lt;T&gt;(Uri url, object request)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry></entry>
            <entry>
              <ulink url="http://todo">PostForMessage&lt;T&gt;(Uri url, object request)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry></entry>
            <entry>
              <ulink url="http://todo">PostForMessage(Uri url, object request)</ulink> and 2 more
            </entry>
          </row>
          <row>
            <entry>PUT</entry>
            <entry>
              <ulink url="http://todo">Put(Uri url, object request)</ulink> and 2 more
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      The 2 others methods takes URI template arguments in two forms, either as a
      <literal>object</literal> variable length argument or an
      <literal>IDictionary&lt;string, object&gt;</literal>. 
      <sbr/>For example,
    <programlisting language="csharp">// using variable length arguments
string result = restTemplate.GetForObject&lt;string&gt;("http://example.com/hotels/{hotel}/bookings/{booking}", 42, 21);

// using a IDictionary&lt;string, object&gt;
<interfacename>IDictionary</interfacename>&lt;string, object&gt; vars = new <interfacename>Dictionary</interfacename>&lt;string, object&gt;(1);
vars.Add("hotel", 42);
string result = restTemplate.GetForObject&lt;string&gt;("http://example.com/hotels/{hotel}/rooms/{hotel}", vars);</programlisting>
    </para>
      
    <para>
      The names of <classname>RestTemplate</classname> methods follow a
      naming convention, the first part indicates what HTTP method is being
      invoked and the second part indicates what is returned. 
      For example,
      <itemizedlist>
        <listitem>
          The method <methodname>GetForObject&lt;T&gt;()</methodname> will perform a GET,
          and return the HTTP response body converted into an object type of your choice.
        </listitem>
        <listitem>
          The method <methodname>PostForLocation()</methodname> will do a POST,
          converting the given object into a HTTP request and return the
          response HTTP Location header where the newly created object can be found.
        </listitem>
        <listitem>
          The method <methodname>PostForMessage&lt;T&gt;()</methodname> will do a POST,
          converting the given object into a HTTP request and return the full HTTP response message 
          composed of the status code and description, the response headers and 
          the responde body converted into an object type of your choice.
        </listitem>
      </itemizedlist>
    </para>

    <para>
      The request object to be POSTed or PUTed, 
      may be a <classname>HttpEntity</classname> instance in order to add additional HTTP headers. 
      An example is shown below.
      <programlisting language="csharp"><classname>Booking</classname> requestBody = // create booking request content
<classname>HttpEntity</classname> entity = new <classname>HttpEntity</classname>(requestBody);
entity.Headers["MyRequestHeader"] = "MyValue";

template.PostForLocation("http://example.com/hotels/{id}/bookings", entity, 1);</programlisting>
    </para>
      
  </section>

  <section id="resttemplate-configuration">
    <title>Configuring the RestTemplate</title>

    <section id="resttemplate-baseaddress">
      <title>Base address</title>
      
      <para>
        In some cases it may be useful to set up the base url of the request once. 
        This is possible by setting the base address in the constructor or property <methodname>BaseAddress</methodname>.
        <sbr/>For example: 
<programlisting language="csharp"><classname>RestTemplate</classname> template = new <classname>RestTemplate</classname>("http://example.com");
<classname>Booking</classname> booking1 = template.GetForObject&lt;<classname>Booking</classname>&gt;("/hotels/{id}/bookings", 1);
<classname>Booking</classname> booking2 = template.GetForObject&lt;<classname>Booking</classname>&gt;("/hotels/{id}/bookings", 2);</programlisting>          
      </para>
        
    </section>

    <section id="resttemplate-messageconverters">
      <title>HTTP message converters</title>

      <para>
        Objects passed to and returned from REST operations are converted to and
        from HTTP messages by <interfacename>IHttpMessageConverter</interfacename> instances.
        <sbr/>Converters for the main mime types are registered by default, but you
        can also write your own converter and register it via the
        <methodname>MessageConverters</methodname> property.
        <sbr/>The default converter instances registered with the template are
        <classname>ByteArrayHttpMessageConverter</classname>,
        <classname>StringHttpMessageConverter</classname>,
        <classname>FormHttpMessageConverter</classname>,
        <classname>XmlDocumentHttpMessageConverter</classname>,
        <classname>DataContractHttpMessageConverter</classname>,
        <classname>XmlSerializableHttpMessageConverter</classname>,
        <classname>XElementHttpMessageConverter</classname>,
        <classname>Rss20FeedHttpMessageConverter</classname>, 
        <classname>Atom10FeedHttpMessageConverter</classname> and
        <classname>JsonHttpMessageConverter</classname>.
        <sbr/>You can override these defaults using the 
        <methodname>MessageConverters</methodname> property.
      </para>
        
      <para>
        Here is an example from the HttpMessageConverter quick start : 
        <programlisting language="csharp">// Add a new converter to the default list
<classname>RestTemplate</classname> template = new <classname>RestTemplate</classname>("http://twitter.com");
template.MessageConverters.Add(new <classname>NJsonHttpMessageConverter</classname>());</programlisting>
      </para>
        
      <para>
        <sbr/>See <link linkend="http-messageconversion">HTTP message conversion</link> chapter 
        for detailed description of each converter.
      </para>
        
    </section>

    <section id="resttemplate-errorhandling">
      <title>Error handling</title>
      
      <para>
        In case of an exception processing the HTTP method, an exception
        of the type <classname>RestClientException</classname> will be thrown.
        <sbr/>The interface <interfacename>IResponseErrorHandler</interfacename> allows you 
        to determine whether a particular response has an error or not.
        <sbr/>The default implementation throws an exception when a 
        HTTP client or server error happens (HTTP status code 4xx or 5xx).
      </para>

      <para>
        The default behavior can be changed by plugging in another implementation into
        the <classname>RestTemplate</classname> via the <methodname>ErrorHandler</methodname> property.
        <sbr/>The example below shows a custom <interfacename>IResponseErrorHandler</interfacename> implementation
        which gives the user total control over the response.
        <programlisting language="csharp">public class <classname>MyResponseErrorHandler</classname> : <interfacename>IResponseErrorHandler</interfacename>
{
  public bool HasError(<interfacename>IClientHttpResponse</interfacename> response)
  {
    return false;
  }

  public void HandleError(<interfacename>IClientHttpResponse</interfacename> response)
  {
    // This method should not be called because HasError returns false.
    throw new <classname>InvalidOperationException</classname>();
  }
}

<classname>RestTemplate</classname> template = new <classname>RestTemplate</classname>("http://example.com");
template.ErrorHandler = new <classname>MyResponseErrorHandler</classname>();

<classname>HttpResponseMessage</classname> responseMessage = template.PostForMessage("/notfound", null); // throw HttpClientErrorException with default implementation
if (responseMessage.StatusCode == <classname>HttpStatusCode</classname>.NotFound)
{
  // ...
}</programlisting>
      </para>

    </section>

    <section id="resttemplate-requestfactory">
      <title>Request factory</title>      
      
      <para>
        <classname>RestTemplate</classname> uses a request factory to create 
        instances of the <interfacename>IClientHttpRequest</interfacename> interface. 
        Default implementation uses the .NET Framework class <classname>HttpWebRequest</classname>.
        <sbr/>This can be overridden by specifying an implementation of
        <interfacename>IClientHttpRequestFactory</interfacename> via the
        <methodname>RequestFactory</methodname> property.
      </para>
        
      <para>
        Default implementation <classname>WebClientHttpRequestFactory</classname> 
        uses an instance of <classname>HttpWebRequest</classname> which can be configured 
        with credentials information or proxy settings.
        <sbr/>An example setting the proxy is shown below :
        <programlisting language="csharp"><classname>WebClientHttpRequestFactory</classname> requestFactory = new <classname>WebClientHttpRequestFactory</classname>();
requestFactory.Proxy = new <classname>WebProxy</classname>("http://proxy.example.com:8080");
requestFactory.Proxy.Credentials = new <classname>NetworkCredential</classname>("userName", "password", "domain");

<classname>RestTemplate</classname> template = new <classname>RestTemplate</classname>("http://example.com");
template.RequestFactory = requestFactory;</programlisting>
      </para>
        
      <section id="resttemplate-requestfactory-authentication">
        <title>Authenticating requests</title>

        <para>
          Custom implementations of the <interfacename>IClientHttpRequestFactory</interfacename> 
          interface can be used to authenticate requests at the RestTemplate level.
        </para>

        <simplesect>
          <title>Basic authentication</title>

          <para>
              TODO: Basic authentication example
          </para>

          <note>
            <para>
              Basic authentication can also be configured at the request level 
              by settings the <literal>Authorization</literal> header :
              <programlisting language="csharp">string authInfo = "username:password";
authInfo = <classname>Convert</classname>.ToBase64String(<classname>Encoding</classname>.UTF8.GetBytes(authInfo));
string authorizationHeader = "Basic " + authInfo;

<classname>HttpEntity</classname> entity = new <classname>HttpEntity</classname>(requestBody);
request.Headers["Authorization"] = authorizationHeader;
template.PostForLocation("/hotels/bookings", entity, 1);</programlisting>
            </para>
          </note>
        </simplesect>

        <simplesect>
          <title>NTLM authentication</title>
          
          <para>
            TODO: NTLM authentication example
          </para>
        </simplesect>

        <simplesect>
          <title>OAuth authentication</title>

          <para>
            This will be supported in a future version based on the Spring.Security Java project.
          </para>
        </simplesect>
            
      </section>

    </section>

    <section id="resttemplate-container">
      <title>Using the Spring.NET container</title>

      <para>
        TODO: XML configuration example
      </para>
        
    </section>
      
  </section>

  <section id="resttemplate-exchangemethod">
    <title>Working with HTTP messages</title>

    <para>
      Besides the methods described above, the <classname>RestTemplate</classname>
      also has the <methodname>Exchange()</methodname> method, which can be
      used for arbitrary HTTP method execution based on the <classname>HttpEntity</classname>
      class.
    </para>
    
        <programlisting language="csharp"><classname>HttpResponseMessage</classname>&lt;T&gt; Exchange&lt;T&gt;(<classname>Uri</classname> url, <classname>HttpMethod</classname> method, <classname>HttpEntity</classname> requestEntity) where T : class;

// also has 2 overloads for URI template based URL.</programlisting>

    <para>
      Perhaps most importantly, the <methodname>Exchange()</methodname>
      method can be used to add request headers and read response headers.
      For example:
    </para>

    <programlisting language="csharp"><classname>HttpEntity</classname> requestEntity = new <classname>HttpEntity</classname>();
requestEntity.Headers["MyRequestHeader"] = "MyValue";

<classname>HttpResponseMessage</classname>&lt;string&gt; response = template.Exchange&lt;string&gt;("/hotels/{hotel}", <classname>HttpMethod</classname>.GET, requestEntity, 42);

string responseHeader = response.Headers["MyResponseHeader"];
string body = response.Body;
<classname>HttpStatusCode</classname> statusCode = response.StatusCode;
string statusDescription = response.StatusDescription;</programlisting>

    <para>
      In the above example, we first prepare a request entity that contains the
      <literal>MyRequestHeader</literal> header. We then retrieve the response, and
      read the <literal>MyResponseHeader</literal> and body.
    </para>
    
  </section>
      
  <section id="resttemplate-executemethod">
    <title>Under the hood...</title>
      
    <para>
      The general callback interface is
      <interfacename>IRequestCallback</interfacename> and is called when the
      execute method is invoked.
    </para>

    <programlisting language="csharp">T Execute&lt;T&gt;(<classname>Uri</classname> url, <classname>HttpMethod</classname> method, <classname>IRequestCallback</classname> requestCallback, <classname>IResponseExtractor</classname>&lt;T&gt; responseExtractor) where T : class;

// also has 2 overloads for URI template based URL.</programlisting>

    <para>
      The <interfacename>RequestCallback</interfacename> interface is defined as
    </para>

    <programlisting language="csharp">public interface <classname>IRequestCallback</classname>
{
  void DoWithRequest(<interfacename>IClientHttpRequest</interfacename> request);
}</programlisting>

    <para>
      and allows you to manipulate the request headers and write to the
      request body. When using the execute method you do not have to worry
      about any resource management, the template will always close the
      request and handle any errors. Refer to the API documentation for more
      information on using the execute method and the meaning of its other
      method arguments.
    </para>
      
  </section>
      
</chapter>
